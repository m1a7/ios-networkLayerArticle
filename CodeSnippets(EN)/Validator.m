//
//  Validator.m
//  vk-networkLayer
//
//  Created by Admin on 03/08/2020.
//  Copyright ¬© 2020 iOS-Team. All rights reserved.
//

#import "Validator.h"
// APIManager's Categories
#import "APIManager+Utilites.h"
// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å –¥–∏—Å–∫–∞ json —Ñ–∞–π–ª—ã –ø–æ –∫–ª—é—á–∞–º APIMethod
#import "Templater.h"


/*--------------------------------------------------------------------------------------------------------------
 –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 --------------------------------------------------------------------------------------------------------------*/

// Shared
NSString * const isOptionalKey = @"isOptional";
NSString * const mustMatchKey  = @"mustMatch";

// For Strings
NSString * const equalInLengthKey                  = @"equalInLength";
NSString * const lengthMustBeEqualOrGreaterThanKey = @"lengthMustBeEqualOrGreaterThan";
NSString * const lengthMustBeEqualOrLessThanKey    = @"lengthMustBeEqualOrLessThan";
NSString * const hasSuffixKey                      = @"hasSuffix";
NSString * const matchWithOneOfKey                 = @"matchWithOneOf";

// For Arrays
NSString * const elementsMustBeEqualOrMoreThanKey  = @"elementsMustBeEqualOrMoreThan";
NSString * const elementsMustBeEqualOrLessThanKey  = @"elementsMustBeEqualOrLessThan";


// For Number
NSString * const minimumKey  = @"minimum";
NSString * const maximumKey  = @"maximum";


/*--------------------------------------------------------------------------------------------------------------
 | [üìÑ‚öôÔ∏è] ‚û°Ô∏è [üóÉ] Instructions for adding new validation parameters to dictionary rules.
 ---------------------------------------------------------------------------------------------------------------
 
 1. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –≤ —à–∞–ø–∫–µ —Ñ–∞–π–ª–∞.
 2. –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π –≤ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤:
     +validateString:
     +validateArray:
     +validateDictionary:
     +validateNumber:
 --------------------------------------------------------------------------------------------------------------*/


/*--------------------------------------------------------------------------------------------------------------
 | üö¶‚öñÔ∏èüìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤–∞–ª–∏–¥–∏—Ä—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
 ---------------------------------------------------------------------------------------------------------------
 
 1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å "validateResponseFrom_", –ø–æ—Å–ª–µ –¥–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ –∏–º—è API –º–µ—Ç–æ–¥–∞
    –ü—Ä–∏–º–µ—Ä:
   + (NSError* _Nullable) validateResponseFrom_usersGet:(NSDictionary*)recievedJSON

 2. –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞. –í—ã–±—Ä–∞–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ª–∏–±–æ —Ä—É—á–Ω—É—é.
 
 3. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ API –º–µ—Ç–æ–¥–∞ –≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ APIMethod.
 
 4. –í –º–µ—Ç–æ–¥–µ +validateResponse:fromAPIMethod: –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é switch.
 --------------------------------------------------------------------------------------------------------------*/


@implementation Validator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
      _______. __    __       ___      .______       _______  _______
     /       ||  |  |  |     /   \     |   _  \     |   ____||       \
    |   (----`|  |__|  |    /  ^  \    |  |_)  |    |  |__   |  .--.  |
     \   \    |   __   |   /  /_\  \   |      /     |   __|  |  |  |  |
 .----)   |   |  |  |  |  /  _____  \  |  |\  \----.|  |____ |  '--'  |
 |_______/    |__|  |__| /__/     \__\ | _| `._____||_______||_______/
 
 ____    ____  ___       __       __   _______       ___   .___________. __    ______   .__   __.
 \   \  /   / /   \     |  |     |  | |       \     /   \  |           ||  |  /  __  \  |  \ |  |
  \   \/   / /  ^  \    |  |     |  | |  .--.  |   /  ^  \ `---|  |----`|  | |  |  |  | |   \|  |
   \      / /  /_\  \   |  |     |  | |  |  |  |  /  /_\  \    |  |     |  | |  |  |  | |  . `  |
    \    / /  _____  \  |  `----.|  | |  '--'  | /  _____  \   |  |     |  | |  `--'  | |  |\   |
     \__/ /__/     \__\ |_______||__| |_______/ /__/     \__\  |__|     |__|  \______/  |__| \__|
 */
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - Shared Validation Methods

/*--------------------------------------------------------------------------------------------------------------
  –ú–µ—Ç–æ–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—Ç—å –¥–ª—è json –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É API
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) validateResponse:(NSDictionary*)recievedJSON fromAPIMethod:(APIMethod)method
{
    NSError* error  = nil;
    switch (method) {
        case APIMethod_UserGet: error = [Validator validateResponseFrom_usersGet:recievedJSON]; break;
        case APIMethod_WallGet: error = [Validator validateResponseFrom_wallGet:recievedJSON];  break;
      
        case APIMethod_PhotosGetAll: error = [Validator validateResponseFrom_photosGetAll:recievedJSON];  break;
        case APIMethod_FriendsGet:   error = [Validator validateResponseFrom_friendsGet:recievedJSON];    break;
            
        default: APILog(@"+validateResponse:fromAPIMethod: | Switch not found mathes!"); break;
    }
    return error;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
      _______..______    _______   ______  __   _______  __    ______
     /       ||   _  \  |   ____| /      ||  | |   ____||  |  /      |
    |   (----`|  |_)  | |  |__   |  ,----'|  | |  |__   |  | |  ,----'
     \   \    |   ___/  |   __|  |  |     |  | |   __|  |  | |  |
 .----)   |   |  |      |  |____ |  `----.|  | |  |     |  | |  `----.
 |_______/    | _|      |_______| \______||__| |__|     |__|  \______|
 
 ____    ____  ___       __       __   _______       ___   .___________. __    ______   .__   __.
 \   \  /   / /   \     |  |     |  | |       \     /   \  |           ||  |  /  __  \  |  \ |  |
  \   \/   / /  ^  \    |  |     |  | |  .--.  |   /  ^  \ `---|  |----`|  | |  |  |  | |   \|  |
   \      / /  /_\  \   |  |     |  | |  |  |  |  /  /_\  \    |  |     |  | |  |  |  | |  . `  |
    \    / /  _____  \  |  `----.|  | |  '--'  | /  _____  \   |  |     |  | |  `--'  | |  |\   |
     \__/ /__/     \__\ |_______||__| |_______/ /__/     \__\  |__|     |__|  \______/  |__| \__|
 */
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - Specific Validation Methods (for specific API methods)

/*--------------------------------------------------------------------------------------------------------------
 –ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –º–µ—Ç–æ–¥–∞ "users.get".
 ------------------------------------------------------------
 –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.
 –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—É—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–∞—Å—Ç–æ–º–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, –∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —à–∞–±–ª–æ–Ω–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ—Ç–æ–¥–æ–º
 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å–≤–µ—Ä–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π json –∏ –µ–≥–æ –æ–±—Ä–∞–∑–µ—Ü —Å –¥–∏—Å–∫–∞ –ø–æ –¥–µ—Å—è—Ç–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) validateResponseFrom_usersGet:(NSDictionary*)recievedJSON
{
    NSDictionary* template = [Templater templateForAPIMethod:APIMethod_UserGet];
    if (!template) return nil;
    
    NSError* error = [Validator automaticValidateResponse:recievedJSON
                                                 template:template
                                           validationMask:AllChecks
                                            fromAPIMethod:APIMethod_UserGet];
    return error;
}


/*--------------------------------------------------------------------------------------------------------------
 –ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –º–µ—Ç–æ–¥–∞ "wall.get".
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) validateResponseFrom_wallGet:(NSDictionary*)recievedJSON
{
    NSDictionary* template = [Templater templateForAPIMethod:APIMethod_WallGet];
    if (!template) return nil;
    
    NSError* error = [Validator automaticValidateResponse:recievedJSON
                                                 template:template
                                           validationMask:AllChecks
                                            fromAPIMethod:APIMethod_WallGet];
    return error;
}


/*--------------------------------------------------------------------------------------------------------------
 –ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –º–µ—Ç–æ–¥–∞ "photos.getAll".
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) validateResponseFrom_photosGetAll:(NSDictionary*)recievedJSON
{
    NSDictionary* template = [Templater templateForAPIMethod:APIMethod_PhotosGetAll];
    if (!template) return nil;
    return nil;
}


/*--------------------------------------------------------------------------------------------------------------
 –ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –º–µ—Ç–æ–¥–∞ "friends.get".
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) validateResponseFrom_friendsGet:(NSDictionary*)recievedJSON
{
    NSDictionary* template = [Templater templateForAPIMethod:APIMethod_FriendsGet];
    if (!template) return nil;
    return nil;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
     ___      __    __  .___________.  ______   .___  ___.      ___   .___________. __    ______
    /   \    |  |  |  | |           | /  __  \  |   \/   |     /   \  |           ||  |  /      |
   /  ^  \   |  |  |  | `---|  |----`|  |  |  | |  \  /  |    /  ^  \ `---|  |----`|  | |  ,----'
  /  /_\  \  |  |  |  |     |  |     |  |  |  | |  |\/|  |   /  /_\  \    |  |     |  | |  |
 /  _____  \ |  `--'  |     |  |     |  `--'  | |  |  |  |  /  _____  \   |  |     |  | |  `----.
/__/     \__\ \______/      |__|      \______/  |__|  |__| /__/     \__\  |__|     |__|  \______|

____    ____  ___       __       __   _______       ___   .___________. __    ______   .__   __.
\   \  /   / /   \     |  |     |  | |       \     /   \  |           ||  |  /  __  \  |  \ |  |
 \   \/   / /  ^  \    |  |     |  | |  .--.  |   /  ^  \ `---|  |----`|  | |  |  |  | |   \|  |
  \      / /  /_\  \   |  |     |  | |  |  |  |  /  /_\  \    |  |     |  | |  |  |  | |  . `  |
   \    / /  _____  \  |  `----.|  | |  '--'  | /  _____  \   |  |     |  | |  `--'  | |  |\   |
    \__/ /__/     \__\ |_______||__| |_______/ /__/     \__\  |__|     |__|  \______/  |__| \__|
*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*--------------------------------------------------------------------------------------------------------------
 –ú–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–≤–µ—Ä—è–µ—Ç –ø—Ä–∏—à–µ–¥—à–∏–π json –∏ –æ–±—Ä–∞–∑–µ—Ü —Å –¥–∏—Å–∫–∞.
 –í —Å–ª—É—á–∞–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É.
 
 –¢–∞–∫–∂–µ –≤—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –ø—Ä–æ–ø–∏—Å–∞–≤ —É—Å–ª–æ–≤–∏—è –≤ —à–∞–±–ª–æ–Ω–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
 –æ–±—ä–µ–∫—Ç–∞ –∏–∑ json.
 –ü—Ä–∏–º–µ—Ä:
 
 {
   "fistName" : "Steve",
   "firstName-Rules" : { "isOptional" : true,
                         "lengthMustBeEqualOrGreaterThan" : 1
                       }
 }
 
 –°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ –ø—Ä–∏–Ω–∏—Ü–∏–ø—É "–∏–º—è–ö–ª—é—á–∞-Rules". –ê–ª–≥–æ—Ä–∏—Ç–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–∞–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) automaticValidateResponse:(NSDictionary*)recievedJSON
                                        template:(NSDictionary*)templateJSON
                                  validationMask:(ResponseValidationMask)mask
                                   fromAPIMethod:(APIMethod)method
{
    NSError* error      = nil;
    BOOL isOccuredError = NO;
    NSString* domain;
    NSMutableArray* userInfoArray = [NSMutableArray new];
    
    if ((recievedJSON.allKeys.count < 1) || (templateJSON.allKeys.count < 1)){
        domain = [NSString stringWithFormat:@"'recievedJSON' or 'templateJSON' is nil."];
        domain = [NSString stringWithFormat:@"%@\nIn +[Validator automaticValidateResponse:template:validationMask:]",domain];
        return [NSError errorWithDomain:domain code:0 userInfo:nil];
    }
    

    NSArray<NSString*>* allKeysFromRecievedJSON = [recievedJSON allKeys];
    NSArray<NSString*>* allKeysFromTemplateJSON = [templateJSON allKeys];

    for (NSString* key in allKeysFromTemplateJSON)
    {
        if ([key hasSuffix:@"-Rules"]){
            continue;
        }
        // –ú–∞—Å—Å–∏–≤ –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞ for —Ä–µ—à–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞.
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Ç–æ –µ—Å—Ç—å (–æ—Ç—Å—É—Ç—å—Å—Ç–≤–∏–µ –∫–ª—é—á–∞,–¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å –∏—Ç–¥),
        // —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç—É —Å–º—ã—Å–ª–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–Ω–æ–π –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
        NSMutableArray* localUserInfoArray = [NSMutableArray new];

        id valueFromJSON     = recievedJSON[key];
        id valueFromTemplate = templateJSON[key];
        
        NSDictionary* rules = [Validator rulesByKey:key inJSON:templateJSON];
        BOOL     isOptional = [rules[isOptionalKey] boolValue];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
        if ((mask & CheckOnKeys) && (![allKeysFromRecievedJSON containsObject:key]) && (!isOptional)){
            isOccuredError = YES;
            domain = [NSString stringWithFormat:@"json hasn't '%@' key",key];
            [userInfoArray addObject:domain];
            continue;
        } else if ((![allKeysFromRecievedJSON containsObject:key]) && (isOptional)) {
            continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏–ø—ã
        if (mask & CheckOnTypesOfValues)
        {
            NSString* superClassValueFromJSON     = [Validator typeSuperClassName:[valueFromJSON superclass]];
            NSString* superClassValueFromTemplate = [Validator typeSuperClassName:[valueFromTemplate superclass]];
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á–∞–º –∏–º–µ–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã,–∫–ª–∞—Å—Å—ã.
            if (![superClassValueFromJSON isEqualToString:superClassValueFromTemplate]){
                isOccuredError = YES;
                domain = [NSString stringWithFormat:@"Value for key '%@' in recievedJSON has class (%@)\n"
                          "Value for key '%@' in templateJSON has class (%@).",
                          key,superClassValueFromJSON,
                          key,superClassValueFromTemplate];
                [localUserInfoArray addObject:domain];
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        if ((mask & CheckSubEntityOnKeys) && (recievedJSON[key])){
            
            //NSLog(@"valueFromJSON.class %@",NSStringFromClass([valueFromJSON superclass]));
            //NSLog(@"valueFromTemplate.class %@",NSStringFromClass([valueFromTemplate superclass]));

           if (([valueFromJSON isKindOfClass:[NSDictionary class]]) &&
               ([valueFromTemplate isKindOfClass:[NSDictionary class]])) {
               
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–¥—Å–ª–æ–≤–∞—Ä–µ–π
                NSError* subError = [Validator automaticValidateResponse:valueFromJSON
                                                                template:valueFromTemplate
                                                          validationMask:mask
                                                           fromAPIMethod:method];
               
                if ((subError) && (subError.userInfo[@"userInfoArray"]))
                {
                    isOccuredError = YES;
                    [localUserInfoArray addObjectsFromArray:subError.userInfo[@"userInfoArray"]];
                }
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –µ—Å–ª–∏ –º—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if ((mask & CheckOnExtendedRules) && (rules.allKeys.count > 0) && (localUserInfoArray.count < 1)) {
            NSError* subError = [Validator validateJSONValue:valueFromJSON templateValue:valueFromTemplate key:key onRules:rules];
          
            if ((subError) && (subError.userInfo[@"userInfoArray"])) {
                isOccuredError = YES;
                [userInfoArray addObjectsFromArray:subError.userInfo[@"userInfoArray"]];
            }
        } else {
            [userInfoArray addObjectsFromArray:localUserInfoArray];
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞
    if (isOccuredError)
    {
        NSString* APIMethod = [API convertAPIMethodToString:method];
        domain = [NSString stringWithFormat:@"json recieved from API method (%@) has incorrect stucture",APIMethod];
        error  = [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : userInfoArray }];
    }
    return error;
}



///////////////////////////////////////////////////////////////////////////////
/*
 .______       __    __   __       _______    ____    ____  ___       __       __   _______       ___   .___________. _______
 |   _  \     |  |  |  | |  |     |   ____|   \   \  /   / /   \     |  |     |  | |       \     /   \  |           ||   ____|
 |  |_)  |    |  |  |  | |  |     |  |__       \   \/   / /  ^  \    |  |     |  | |  .--.  |   /  ^  \ `---|  |----`|  |__
 |      /     |  |  |  | |  |     |   __|       \      / /  /_\  \   |  |     |  | |  |  |  |  /  /_\  \    |  |     |   __|
 |  |\  \----.|  `--'  | |  `----.|  |____       \    / /  _____  \  |  `----.|  | |  '--'  | /  _____  \   |  |     |  |____
 | _| `._____| \______/  |_______||_______|       \__/ /__/     \__\ |_______||__| |_______/ /__/     \__\  |__|     |_______|
 */
///////////////////////////////////////////////////////////////////////////////

#pragma mark - Rule Validate

/*--------------------------------------------------------------------------------------------------------------
 –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∑–∞–¥–∞–Ω–Ω—ã–º –≤ json —Ñ–∞–π–ª–µ.
 –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ json —Ñ–∞–π–ª–∞, –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Ç–∏–ø–∞ (String/Array/Dictionary/Number) –≤—ã–∑—ã–≤–∞—Ç—å –Ω—É–∂–Ω—ã–π
 –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) validateJSONValue:(id)jsonValue templateValue:(id)templateValue key:(NSString*)key onRules:(NSDictionary*)rules
{
    NSError*  error   = nil;
    NSString* message = nil;
    
    // Check on nil
    if ((!jsonValue) || (!templateValue) || (!rules)){
        message = @"One of params is nil. In +validateJSONValue:templateValue:key:onRules:";
        return [NSError errorWithDomain:message code:0 userInfo:@{ @"userInfoArray" : @[message] }];
    }
    
    // Check on other class
    NSString* superClassValueFromJSON     = [Validator typeSuperClassName:[jsonValue superclass]];
    NSString* superClassValueFromTemplate = [Validator typeSuperClassName:[templateValue superclass]];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á–∞–º –∏–º–µ–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã,–∫–ª–∞—Å—Å—ã.
    if (![superClassValueFromJSON isEqualToString:superClassValueFromTemplate]){
        message = @"jsonValue & templateValue are members of other classes. In +validateJSONValue:templateValue:key:onRules:";
        return [NSError errorWithDomain:message code:0 userInfo:@{ @"userInfoArray" : @[message] }];
    }
    
    // String case:
    if ([superClassValueFromJSON isEqualToString:@"NSString"]){
        return [Validator validateString:jsonValue templateString:templateValue key:key onRules:rules];
    }
    
    // Array case:
    if ([superClassValueFromJSON isEqualToString:@"NSArray"]){
        return [Validator validateArray:jsonValue templateArray:templateValue key:key onRules:rules];
    }

    // Dictionary case:
    if ([superClassValueFromJSON isEqualToString:@"NSDictionary"]){
        return [Validator validateDictionary:jsonValue templateDictionary:templateValue key:key onRules:rules];
    }
    
    // Number case:
    if ([superClassValueFromJSON isEqualToString:@"NSNumber"]){
        return  [Validator validateNumber:jsonValue templateNumber:templateValue key:key onRules:rules];
    }
    
    return error;
}

/*--------------------------------------------------------------------------------------------------------------
 –ú–µ—Ç–æ–¥ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞ NSString
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) validateString:(nullable NSString*)jsonString
                       templateString:(NSString*)templateString
                                  key:(NSString*)key
                              onRules:(NSDictionary*)rules
{
    NSError*  error  = nil;
    NSString* domain = nil;
    NSMutableArray* userInfoArray = [NSMutableArray new];
    
    // Check on nil
    if ((!templateString) || (rules.allKeys.count < 1)){
        domain = str(@"One of params (in +validateString:...) is nil. By key (%@)",key);
        return [NSError errorWithDomain:domain code:0 userInfo: @{ @"userInfoArray" : @[domain] }];
    }
    
    BOOL isOptional             =  [rules[isOptionalKey]        boolValue];
    BOOL  mustMatch             =  [rules[mustMatchKey]         boolValue];
    BOOL equalInLength          =  [rules[equalInLengthKey]     boolValue];
    NSInteger lengthMustBeEqualOrGreaterThan =  [rules[lengthMustBeEqualOrGreaterThanKey] integerValue];
    NSInteger lengthMustBeEqualOrLessThan    =  [rules[lengthMustBeEqualOrLessThanKey]    integerValue];
    NSString* hasSuffix         =  rules[hasSuffixKey];
    NSArray*  matchWithOneOf    =  rules[matchWithOneOfKey];
    
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ json==nil, –∞ —É—Å–ª–æ–≤–∏—è –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –ø—Ä–æ–ø–µ—Ä—Ç–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if ((isOptional) && (!jsonString)){
        return nil;
    }
    
    //hasSuffix
    if ((hasSuffix) && (![jsonString hasPrefix:hasSuffix])) {
        domain = str(@"The value(%@) by key(%@) hasn't requiered suffix(%@)",jsonString,key,hasSuffix);
        [userInfoArray addObject:domain];
    }
    
    // matchWithOneOf
    if (matchWithOneOf.count > 0) {
       NSArray*  lowercaseArray  =  [Validator lowercaseArray:matchWithOneOf];
       NSString* lowercaseString =  [jsonString lowercaseString];
      
        if (![lowercaseArray containsObject:lowercaseString]){
            domain = str(@"The value(%@) by key(%@) not found in the allowed array(%@))",jsonString,key,matchWithOneOf);
            [userInfoArray addObject:domain];
        }
    }
    
    if ((mustMatch) && (![jsonString isEqualToString:templateString])) {
        domain = str(@"The value by key(%@) not match with required=%@)",key,templateString);
        [userInfoArray addObject:domain];
    }
    
    if ((equalInLength) && (jsonString.length != templateString.length)) {
        domain = str(@"The length of values for key(%@) does not match",key);
        [userInfoArray addObject:domain];
    }
    
    if ((rules[@"lengthMustBeEqualOrGreaterThan"]) && (rules[@"lengthMustBeEqualOrLessThan"])){
        if (lengthMustBeEqualOrGreaterThan > lengthMustBeEqualOrLessThan){
            domain = str(@"Invalid rules (lengthMustBeEqualOrGreaterThan (cannot be greater than)> lengthMustBeEqualOrLessThan) in key(%@) value(%@)",key,jsonString);
            [userInfoArray addObject:domain];
            return [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : userInfoArray }];
        }
    }
    
    //lengthGreaterThan
    if ((rules[@"lengthMustBeEqualOrGreaterThan"]) && (jsonString.length <= lengthMustBeEqualOrGreaterThan)) {
        domain = str(@"The length of the key(%@) value is less than the required length. Must be greater than %d",key,lengthMustBeEqualOrGreaterThan);
        [userInfoArray addObject:domain];
    }
    
    //lengthGreaterThan
    if ((rules[@"lengthMustBeEqualOrLessThan"]) && (jsonString.length >= lengthMustBeEqualOrLessThan)) {
        domain = str(@"The length of the key(%@) value is greater than the required length. Must be less than %d",key,lengthMustBeEqualOrLessThan);
        [userInfoArray addObject:domain];
    }
    
    
    if (userInfoArray.count > 0){
        domain = [NSString stringWithFormat:@"Value for key(%@) has uncorrect data or structure",key];
        error  = [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : userInfoArray }];
    }
    
    return error;
}


/*--------------------------------------------------------------------------------------------------------------
 –ú–µ—Ç–æ–¥ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ NSArray
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) validateArray:(nullable NSArray*)jsonArray
                       templateArray:(NSArray*)templateArray
                                 key:(NSString*)key
                             onRules:(NSDictionary*)rules
{
    NSError*  error  = nil;
    NSString* domain = nil;
    NSMutableArray* userInfoArray = [NSMutableArray new];
    
    // Check on nil
    if ((!templateArray) || (rules.allKeys.count < 1)){
        domain = str(@"One of params (in +validateArray:...) is nil. By key (%@)",key);
        return [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : @[domain] }];
    }
    
    BOOL isOptional = [rules[isOptionalKey] boolValue];
    BOOL  mustMatch = [rules[mustMatchKey]  boolValue];

    NSInteger elementsMustBeEqualOrMoreThan = [rules[elementsMustBeEqualOrMoreThanKey] integerValue];
    NSInteger elementsMustBeEqualOrLessThan = [rules[elementsMustBeEqualOrLessThanKey] integerValue];
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ json==nil, –∞ —É—Å–ª–æ–≤–∏—è –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –ø—Ä–æ–ø–µ—Ä—Ç–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if ((isOptional) && (!jsonArray)){
        return nil;
    }
    
    if (mustMatch){
        
        NSArray* arrayWithoutRules  = [Validator removeAllRulesFromArrayAndNastedStructure:templateArray];
        NSArray* lowercaseTemplate  = [Validator lowercaseArray:arrayWithoutRules];
        NSArray* lowercaseJSON      = [Validator lowercaseArray:jsonArray];
        
        if (![lowercaseTemplate isEqualToArray:lowercaseJSON]){
            domain = str(@"The value by key(%@) not match with required=%@)",key,templateArray);
            [userInfoArray addObject:domain];
        }
    }
    
    if ((rules[@"elementsMustBeEqualOrMoreThan"]) && (jsonArray.count < elementsMustBeEqualOrMoreThan)){
        domain = str(@"Array by key(%@) from json has less elements than required(%d)",key,elementsMustBeEqualOrMoreThan);
        [userInfoArray addObject:domain];
    }
    
    if ((rules[@"elementsMustBeEqualOrLessThan"]) && (jsonArray.count > elementsMustBeEqualOrLessThan)){
        domain = str(@"Array by key(%@) from json has greater elements than required(%d)",key,elementsMustBeEqualOrLessThan);
        [userInfoArray addObject:domain];
    }
    
    
    if (userInfoArray.count > 0){
        domain = [NSString stringWithFormat:@"Value for key(%@) has uncorrect data or structure",key];
        error  = [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : userInfoArray }];
    }
    
    return error;
}


/*--------------------------------------------------------------------------------------------------------------
 –ú–µ—Ç–æ–¥ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ NSDictionary
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) validateDictionary:(nullable NSDictionary*)jsonDictionary
                       templateDictionary:(NSDictionary*)templateDictionary
                                      key:(NSString*)key
                                  onRules:(NSDictionary*)rules
{
    NSError*  error  = nil;
    NSString* domain = nil;
    
    // Check on nil
    if ((!templateDictionary) || (rules.allKeys.count < 1)){
        domain = str(@"One of params (in +validateDictionary:...) is nil. By key (%@)",key);
        return [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : @[domain] }];
    }
    
    BOOL isOptional = [rules[isOptionalKey] boolValue];
    BOOL  mustMatch = [rules[mustMatchKey]  boolValue];
    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ json==nil, –∞ —É—Å–ª–æ–≤–∏—è –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –ø—Ä–æ–ø–µ—Ä—Ç–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if ((isOptional) && (!jsonDictionary)){
        return nil;
    }
    
    if (mustMatch){
        NSDictionary* templateWithoutRules = [Validator removeAllRulesFromDictionaryAndNastedStructure:templateDictionary];
        if (![jsonDictionary isEqualToDictionary:templateWithoutRules]){
            domain = str(@"The value by key(%@) not match with required=(%@)",key,templateDictionary);
            return [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : @[domain] }];
        }
    }
    return error;
}



/*--------------------------------------------------------------------------------------------------------------
 –ú–µ—Ç–æ–¥ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ NSNumber. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (int/float/..ect)
 --------------------------------------------------------------------------------------------------------------*/
+ (NSError* _Nullable) validateNumber:(nullable NSNumber*)jsonNumber
                       templateNumber:(NSNumber*)templateNumber
                                  key:(NSString*)key
                              onRules:(NSDictionary*)rules
{
    NSError*  error  = nil;
    NSString* domain = nil;
    NSMutableArray* userInfoArray = [NSMutableArray new];
    
    // Check on nil
    if ((!templateNumber) || (rules.allKeys.count < 1)){
        domain = str(@"One of params (in +validateNumber:...) is nil. By key (%@)",key);
        return [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : @[domain] }];
    }
    float jsonFloat = [jsonNumber  floatValue];

    BOOL isOptional = [rules[isOptionalKey] boolValue];
    BOOL  mustMatch = [rules[mustMatchKey]  boolValue];
    
    float  minimum = [rules[minimumKey]  floatValue];
    float  maximum = [rules[maximumKey]  floatValue];

    
    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ json==nil, –∞ —É—Å–ª–æ–≤–∏—è –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ –ø—Ä–æ–ø–µ—Ä—Ç–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if ((isOptional) && (!jsonNumber)){
        return nil;
    }
    
    if ((mustMatch) && (![jsonNumber isEqualToNumber:templateNumber])){
        domain = str(@"Number by key(%@) from json not matches with templete value(%@))",key,templateNumber);
        [userInfoArray addObject:domain];
    }
    
    // BOOL –¥–∞–ª–µ–µ –Ω–µ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
    if ([NSStringFromClass([jsonNumber class]) isEqualToString:@"__NSCFBoolean"]){
          if (userInfoArray.count > 0) return [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : userInfoArray }];
    }
    
    
    if ((rules[minimumKey]) && (rules[maximumKey])){
        if (minimum > maximum){
            domain = str(@"Invalid rules (minimum (cannot be greater than)> maximum) in key(%@))",key);
            [userInfoArray addObject:domain];
            return [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : userInfoArray }];
        }
    }
    
    
    if ((rules[minimumKey]) && (jsonFloat < minimum)){
        domain = str(@"Number by key(%@) from json has value(%f). But mandatory minimum is (%f))",key,jsonFloat,minimum);
        [userInfoArray addObject:domain];
    }
    
    
    if ((rules[maximumKey]) && (jsonFloat > maximum)){
        domain = str(@"Number by key(%@) from json has value(%f). But mandatory maximum is (%f))",key,jsonFloat,maximum);
        [userInfoArray addObject:domain];
    }
    
    if (userInfoArray.count > 0){
        domain = [NSString stringWithFormat:@"Value for key(%@) has uncorrect data or structure",key];
        error  = [NSError errorWithDomain:domain code:0 userInfo:@{ @"userInfoArray" : userInfoArray }];
    }
    return error;
}





///////////////////////////////////////////////////////////////////////////////
/*
  __    __   _______  __      .______    _______ .______
 |  |  |  | |   ____||  |     |   _  \  |   ____||   _  \
 |  |__|  | |  |__   |  |     |  |_)  | |  |__   |  |_)  |
 |   __   | |   __|  |  |     |   ___/  |   __|  |      /
 |  |  |  | |  |____ |  `----.|  |      |  |____ |  |\  \----.
 |__|  |__| |_______||_______|| _|      |_______|| _| `._____|
 */
///////////////////////////////////////////////////////////////////////////////

#pragma mark - Helper

/*--------------------------------------------------------------------------------------------------------------
 –ú–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç 'Class' –∏  –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–µ –∫ –æ–¥–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É.
 –ù–∞–ø—Ä–∏–º–µ—Ä –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —Å–∏—Ç—É–∞—Ü–∏—è, —á—Ç–æ –≤ –¥—Ä—É—Ö —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä—è—Ö —Å—Ç—Ä–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
 ('__NSCFString' –∏ 'NSString').
 –ü–æ—ç—Ç–æ–º—É –∫–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏–∑ Foundation.
 --------------------------------------------------------------------------------------------------------------*/
+ (NSString*) typeSuperClassName:(Class)superClass
{
    NSString* superClassName = NSStringFromClass(superClass);
    
    // –ò—Å–∫–ª—é—á–µ–Ω–∏—è
    if (([superClassName isEqualToString:@"__NSCFString"]) || ([superClassName isEqualToString:@"NSMutableString"])){
        return @"NSString";
    }
    
    // –î–∞–ª–µ–µ —Ç—É—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤....
    return superClassName;
}


/*--------------------------------------------------------------------------------------------------------------
 –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ (–µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç—Å—è) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –æ–±—â–µ–≥–æ json
 --------------------------------------------------------------------------------------------------------------*/
+ (NSDictionary* _Nullable) rulesByKey:(NSString*)key inJSON:(NSDictionary*)json
{
    if ((!key) || (!json)) return nil;
    
    NSDictionary* rules = nil;
    NSString*   ruleKey = [NSString stringWithFormat:@"%@-Rules",key];
    
    if (json[ruleKey]){
        rules = json[ruleKey];
    }
    return rules;
}



/*--------------------------------------------------------------------------------------------------------------
 –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏ –∏–∑ –µ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä.
 –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Ç–µ—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –∫–ª—é—á "mustMatch" –∏–º–µ–µ—Ç —Ü–µ–ª—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ —à–∞–±–ª–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤ —Å–µ–±–µ –∏–º–µ–µ—Ç
 –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å–≤–æ–∏—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
 
 –ß—Ç–æ–±—ã –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —à–∞–±–ª–æ–Ω–∞, —Ç–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ 'rules'.
 --------------------------------------------------------------------------------------------------------------*/

+ (NSDictionary* _Nullable) removeAllRulesFromDictionaryAndNastedStructure:(NSDictionary*)dictionary
{
    NSMutableDictionary* mutableCopy = [dictionary mutableCopy];
    
    // (!) –ö—Å—Ç–∞—Ç–∏ –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ, —Å–ª–æ–≤–∞—Ä–∏ –∂–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø–∞—Ä–∞–ª–µ–ª–∏—Ç—å, –∏ –∏—Å–∫–∞—Ç—å –ø—É—Ç–∏ –≤ –æ–¥–Ω–æ–º, –∞ —É–¥–∞–ª—è—Ç—å –≤ –¥—Ä—É–≥–æ–º...
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º—É —Å–ª–æ–≤–∞—Ä—é —á–µ—Ä–µ–∑ –µ–≥–æ –∫–ª—é—á–∏
    for (NSString* key in [mutableCopy allKeys]) {
        
        // –ï—Å–ª–∏ –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ —ç—Ç–æ—Ç —Å—É—Ñ—Ñ–∏–∫—Å, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, —Ç–æ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É.
        if ([key rangeOfString:@"-Rules"].location != NSNotFound){
            [mutableCopy removeObjectForKey:key];
            continue;
        }
        // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É —ç—Ç–æ –∫–∞–∫–æ–π-—Ç–æ —Å–ª–æ–≤–∞—Ä—å, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –ø—É—Å—Ç—å –æ—Ç—á–∏—Å—Ç–∏—Ç –∏ –≤–µ—Ä–Ω–µ—Ç —á–∏—Å—Ç—ã–π.
        if ([mutableCopy[key] isKindOfClass:[NSDictionary class]]){
            mutableCopy[key] = [Validator removeAllRulesFromDictionaryAndNastedStructure:mutableCopy[key]];
            continue;
        }
        // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É —ç—Ç–æ –Ω–µ–∫–∏–π –º–∞—Å—Å–∏–≤, —Ç–æ —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∏ –ø—É—Å—Ç—å –≤–µ—Ä–Ω–µ—Ç –Ω–∞–º —á–∏—Ç—Å—ã–π –º–∞—Å—Å–∏–≤
        if ([mutableCopy[key] isKindOfClass:[NSArray class]]){
            mutableCopy[key] = [Validator removeAllRulesFromArrayAndNastedStructure:mutableCopy[key]];
            continue;
        }
    }
    return mutableCopy;
}


/*--------------------------------------------------------------------------------------------------------------
  –ú–µ—Ç–æ–¥ +validateArray:.. —Å—Ä–µ–¥–∏ –ø—Ä–æ—á–∏—Ö, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–æ —Ñ–ª–∞–≥—É "mustMatch".
  –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –≤ —Å–µ–±–µ —Å–ª–æ–≤–∞—Ä–∏, –∞ —ç—Ç–∏ —Å–ª–æ–≤–∞—Ä–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞, —Ç–æ –º–µ—Ç–æ–¥
  -isEqualToArray: –Ω–µ —Å–º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.
 
  –î–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö.
 --------------------------------------------------------------------------------------------------------------*/
+ (NSArray* _Nullable) removeAllRulesFromArrayAndNastedStructure:(NSArray*)array
{
    NSMutableArray* mutableCopy = [array mutableCopy];
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–ª–æ–≤–∞—Ä–µ–π
    NSMutableArray<NSNumber*>* dictionariesIndexes = [NSMutableArray new];
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π
    NSMutableArray<NSDictionary*>* dictionaries    = [NSMutableArray new];
    
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å.
    // –¢–æ –∑–∞–Ω–æ—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ (dictionariesIndexes –∏ dictionaries).
    for (NSInteger i=0; i<=mutableCopy.count-1; i++) {
        
        id value = mutableCopy[i];
        if ([value isKindOfClass:[NSDictionary class]]){
            [dictionaries        addObject:value];
            [dictionariesIndexes addObject:[NSNumber numberWithInteger:i]];
        }
    }
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä–∏
    for (NSInteger i=0; i<=dictionaries.count-1; i++) {
        
        // –ë–µ—Ä–µ–º —Å–ª–æ–≤–∞—Ä—å
        NSDictionary* dictionary = dictionaries[i];
        // –ë–µ—Ä–µ–º –µ–≥–æ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ mutableCopy (!)
        NSInteger         index  = [dictionariesIndexes[i] integerValue];
        
        // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ—Ç—á–∏—Å—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä–µ–π
        NSDictionary* newDict = [Validator removeAllRulesFromDictionaryAndNastedStructure:dictionary];
        // –û—Ç—á–∏—â–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–º–µ—â–∞–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤
        mutableCopy[index] = newDict;
    }
    return mutableCopy;
}


/*--------------------------------------------------------------------------------------------------------------
  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –º–∞–ª—ã–π —Ä–µ–≥–∏—Å—Ç—Ä.
 --------------------------------------------------------------------------------------------------------------*/
+ (NSArray*) lowercaseArray:(NSArray*)array
{
    NSMutableArray *tempArray = [NSMutableArray arrayWithCapacity:array.count];
    
    for (id value in array) {

        if ([[Validator typeSuperClassName:[value superclass]] isEqualToString:@"NSString"]){
            NSString *str = (NSString*)value;
            [tempArray addObject:[str lowercaseString]];
        }
    }
    return [tempArray copy];
}

@end
